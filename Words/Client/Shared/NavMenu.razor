@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider authStateProvider

<nav class="navbar navbar-expand-lg bg-body-tertiary">
    <div class="container-fluid">
        <a class="navbar-brand" style="cursor: pointer" @onclick="GoToWordsPage">Words</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
            <div class="navbar-nav me-auto mb-2 mb-lg-0">
                <AuthorizeView>
                    <NotAuthorized>
                        <a class="nav-link"  href="/loginpage">Login</a>
                        <a class="nav-link"  href="/registerpage">Register</a>
                    </NotAuthorized>
                    <Authorized>
                        <a class="nav-link" style="cursor: pointer"  @onclick="GoToCreateWordPage" >Create Word</a>
                        <a class="nav-link" style="cursor: pointer" href="/advicepage">Random Advice</a>
                    </Authorized>
                 
                </AuthorizeView>                   
            </div>
            <AuthorizeView>
                <a style="color:blue; cursor:pointer;" class="nav-link" @onclick="Logout">Logout</a>
            </AuthorizeView>
            
        </div>
    </div>
</nav>


@code
{
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }


    async Task Logout()
    {
        // Loging out
        // Remove the token from local storage
        await LocalStorage.RemoveItemAsync("token");
        await authStateProvider.GetAuthenticationStateAsync();

        // Go to root page (Start over)
        NavigationManager.NavigateTo("/");
    }

    async Task GoToCreateWordPage()
    {
        var user = (await AuthState).User;
        if (user.Identity is not null)
        {
            if (user.Identity.IsAuthenticated)
            {
                var userIdClaim = user.FindFirst("Sub");
                if (userIdClaim != null)
                {
                    var userId = userIdClaim.Value;
                    // Use the user ID as needed
                    Console.WriteLine($"User ID: {userId}");

                    // You can now navigate to the "/wordspage" or perform other actions
                    NavigationManager.NavigateTo($"/editwordpage/{userId}");
                }
                else
                {
                    Console.WriteLine($"fail");
                }
                //NavigationManager.NavigateTo("/wordspage");

            }
            else
            {
                Console.WriteLine($"no auth");
            }
        }
        else
        {
            Console.WriteLine($"no identity");
        }
    }

    async Task GoToWordsPage()
    {
        var user = (await AuthState).User;
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
                var userIdClaim = user.FindFirst("Sub");

                if (userIdClaim != null)
                {
                    var userId = userIdClaim.Value;

                    Console.WriteLine($"User ID: {userId}");

                    
                    NavigationManager.NavigateTo($"/wordspage/{userId}");
                }  
        }
    }
}