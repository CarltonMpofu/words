@* @layout PublicLayout *@
@page "/loginpage"
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage

<div class="flex-container">

    <div class="card-background">
        <div>
            <h1 id="words">Words</h1>
            <hr id="words-line" />
        </div>
        <div class="form-background">
            <h2>Login</h2> 

                <EditForm Model="userDto" OnValidSubmit="LoginUser">
                    <p> @loginFormWarning</p>
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="username" class="form-label">User name</label>
                    <InputText class="form-control" @bind-Value="userDto.UserName" id="username" />
                    <ValidationMessage For="@(() => userDto.UserName)" />
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                    <InputText type="password" class="form-control" @bind-Value="userDto.Password" id="password" />
                    <ValidationMessage For="@(() => userDto.Password)" />
                    </div>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </EditForm>
        </div>

    </div>

</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    UserLoginDto userDto = new UserLoginDto { /* UserName = "Mika", Password="123456789" */ };

    string loginFormWarning = "";

    /// <summary>
    /// Checks if the user has been authenticated before showing page
    /// If authenticated then redirect user to a different page (words page)
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            // Get the user id from claim
            var userIdClaim = user.FindFirst("Sub");
            if (userIdClaim != null)
            {
                var userId = userIdClaim.Value;

                NavigationManager.NavigateTo($"/wordspage/{userId}");
            }
        }

        await base.OnInitializedAsync();
    }

    async Task LoginUser()
    {
        var response = await Http.PostAsJsonAsync<UserLoginDto>("api/user/login", userDto);

        if (!response.IsSuccessStatusCode)
        { 
            // Not successfull
            // Manage errors

            if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                var errorMessage = await response.Content.ReadAsStringAsync();

                if (errorMessage.Contains("Invalid username"))
                {
                    loginFormWarning = "User not found";
                }
                else if (errorMessage.Contains("Wrong password"))
                {
                    loginFormWarning = "Wrong Password";
                }
                else
                {
                    // Handle other BadRequest scenarios
                }
            }
        }
        else
        {// Login successfull

            // Get the token and id from response
            var loginResponse = await response.Content.ReadFromJsonAsync<LoginResponseDto>();
            if (loginResponse != null)
            { 
                var token = loginResponse.Token;
                var userId = loginResponse.UserId;

                // Save token to local storage
                await LocalStorage.SetItemAsync("token", token);
                await AuthStateProvider.GetAuthenticationStateAsync();

                NavigationManager.NavigateTo($"/wordspage/{userId}");
            }
        }

    }
}
