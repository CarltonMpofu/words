@page "/advicepage"
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@* @attribute [Authorize] *@

<div class="flex-container">
    <div class="card-background">
            <div>
                <h1 id="words">Words</h1>
                <hr id="words-line" />
            </div>
            <div class="quote-container">
                @if(adviceSlip != null)
                {
                <h2>Advice #@adviceSlip.Slip.Id</h2>
                <p id="quote-text">@adviceSlip.Slip.Advice</p>
                <button @onclick="GetRandomQuote">Get Random Advice</button>
                }
                else
                {
                    <h2>Random Advice</h2>
                    <p id="quote-text">Click the button for a new one!</p>
                    <button  @onclick="GetRandomQuote">Get Random Advice</button>
                
                }
        </div>
            
        </div>
</div>

@code
{
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private AdviceSlip? adviceSlip;

    protected override async Task OnInitializedAsync()
    {
        // Redirect the user to the home route if not authenticated
        var user = (await AuthState).User;
        if (user.Identity is not null && !user.Identity.IsAuthenticated)
        {
            
           NavigationManager.NavigateTo("/");
            
        }

        await base.OnInitializedAsync();
    }

   
    async void GetRandomQuote()
    {
        try
        {
            adviceSlip = await Http.GetFromJsonAsync<AdviceSlip>("api/word/getrandomadvice");
 
        }
        catch (Exception ex)
        {
            // Handle errors gracefully
            Console.Error.WriteLine(ex.Message);
        }
    } 
}
