@layout PublicLayout
@page "/registerpage"
@inject NavigationManager NavigationManager
@inject HttpClient Http

@* <MudCard>
    <MudForm Model="user">
        <MudCardContent>
            <MudTextField @bind-Value="TextValue" Label="Standard" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
            <MudTextField @bind-Value="TextValue" Label="Filled" Variant="Variant.Filled" Margin="Margin.Dense"></MudTextField>
            <MudTextField @bind-Value="TextValue" Label="Outlined" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
        </MudCardContent>
    </MudForm>
</MudCard> *@

 <div class="flex-container">

    <div class="card-background">
        <div>
            <h1>Words</h1>
            <hr />
        </div>
        <div class="form-background">
            <h2>Register</h2>
                   
                  <EditForm Model="userRegisterDto" OnValidSubmit="HandleSubmit">
                    <p> @userNameExistsWarning</p>
                    <DataAnnotationsValidator/>
                    <div class="mb-3">
                        <label for="username" class="form-label">User name</label>
                        <InputText class="form-control" @bind-Value="userRegisterDto.Username" id="username"/>
                        <ValidationMessage For="@(() => userRegisterDto.Username)" />
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                    <InputText type="password" class="form-control" @bind-Value="userRegisterDto.Password" id="password" />
                    <ValidationMessage For="@(() => userRegisterDto.Password)" />
                    </div>
                    <div class="mb-3">
                        <label for="password2" class="form-label">Confirm password</label>
                    <InputText type="password" class="form-control" @bind-Value="userRegisterDto.Password2" id="password2" />
                    <ValidationMessage For="@(() => userRegisterDto.Password2)" />
                    </div>
                    <button type="submit" class="btn btn-primary">Register</button>
                </EditForm>
                
        </div>

    </div>

</div> 

@code {
    UserRegisterDto userRegisterDto = new UserRegisterDto { Username = "Carlton", Password = "12345678", Password2 = "12345678" };

    // List<User> users = new List<User>();

    string userNameExistsWarning = "";

    async Task HandleSubmit()
    {
        var users = await Http.GetFromJsonAsync<List<User>>("api/user");

        if(users is not null)
        {
            //Console.WriteLine(users.Where((c) => c.Username.Equals(registerFormModel.Username)).Count());
            bool userNameExists = users.Where((c) => c.Username.Equals(userRegisterDto.Username)).Count() != 0;

            if(userNameExists)
                userNameExistsWarning = "Username already exists";
            else
            { // Create new user
                // User user = new User { };
                // user.Username = registerFormModel.Username;
                // user.Password = registerFormModel.Password;
                Console.WriteLine("Create the user");
                Console.WriteLine(userRegisterDto.Username);
                var currentUser = await Http.PostAsJsonAsync<UserRegisterDto>("api/user/register", userRegisterDto);
                NavigationManager.NavigateTo("loginpage");
            }
        }
        

        //NavigationManager.NavigateTo("wordspage");

        // Check if username is not in database
        // If not then create new user with hash and salt
        // Add to database and login
    }
}
