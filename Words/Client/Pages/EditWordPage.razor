@page "/editwordpage/{userId:int}"
@page "/editwordpage/{userId:int}/{wordId:int}"
@inject HttpClient Http;
@inject NavigationManager NavigationManager;
@attribute [Authorize]

<div class="main">
    <div class="main-div">
        <h1>Words</h1>
        <hr>
        
        <div class="edit-form">
            @if (WordId is null)
            {
                <h2>Add Word</h2>
            }
            else
            {
                <h2>Edit Word</h2>
            }
            <EditForm Model="word" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
            <label for="term">Term:</label>
                <InputText class="form-control" id="term" @bind-Value="word.Term" />
                <ValidationMessage For="@(() => word.Term)" />
            <label for="definition">Definition:</label>
                <InputText class="form-control" id="definition" @bind-Value="word.Definition" />
                <ValidationMessage For="@(() => word.Definition)" />
            <div class="buttons">
                <button class="btn btn-primary save-button" type="submit">Save Word</button>
                <button class="btn btn-secondary" type="button"  @onclick="DeleteWord">Delete Word</button>
            </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter] public int UserId { get; set; }
    [Parameter] public int? WordId { get; set; }

    UserWord word = new UserWord { };

    async Task HandleSubmit()
    {
        if (WordId is null)
        { // Add the word
            word.UserId = UserId;
            await Http.PostAsJsonAsync<UserWord>("api/word/", word);
        }
        else
        { // Update the word
            await Http.PutAsJsonAsync<UserWord>($"api/word/{WordId}", word);
        }

        NavigationManager.NavigateTo($"/wordspage/{UserId}");
    }

    async Task DeleteWord()
    {
        if(WordId is not null)
        {
            await Http.DeleteAsync($"api/word/{WordId}");

            NavigationManager.NavigateTo($"/wordspage/{UserId}");
        }
        
    }

    protected override async Task OnParametersSetAsync()
    {
        if (WordId is not null)
        {
            var result = await Http.GetFromJsonAsync<UserWord>($"api/word/{UserId}/{WordId}");

            if(result != null)
            {
                word = result;
            }
        }
    }
}
